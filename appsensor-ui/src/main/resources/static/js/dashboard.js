var socket;
var client;

function addActivityMessage(element) {
	var tableRef = document.getElementById('dashboard-activity-log');
	
	//delete last row if table too big
	if(tableRef.rows.length > 10) {
		tableRef.deleteRow(tableRef.rows.length -1)
	}
	
	//console.log('num rows = ' + tableRef.rows.length);
	
	var newRow = tableRef.insertRow(1);
	
	var cType = newRow.insertCell(0);
	var txtType = document.createTextNode(element.type);
	cType.appendChild(txtType);
	
	var cDetPt = newRow.insertCell(1);
	var txtDetPt = document.createTextNode(element.category);
	cDetPt.appendChild(txtDetPt);
	
	var cUser = newRow.insertCell(2);
	var txtUser = document.createTextNode(element.from);
	cUser.appendChild(txtUser);
	
	var cDetSys = newRow.insertCell(3);
	var txtDetSys = document.createTextNode(element.to);
	cDetSys.appendChild(txtDetSys);
	
	var cTS = newRow.insertCell(4);
	var txtTS = document.createTextNode(element.timestamp);
	cTS.appendChild(txtTS);
}

// helper since events and attacks look the same
function logEventOrAttack(type, message) {
	var data = JSON.parse(message.body);
    
    var user = data.user;
    var detectionPoint = data.detectionPoint;
    var detectionSystem = data.detectionSystem;
    
    var composed = {};
    
    composed.type = type;
    composed.category = detectionPoint.label + ' (' + detectionPoint.category + ')' ;
    composed.timestamp = data.timestamp;
    
    var fromIpAddress = (user.ipAddress) ? ' (' + user.ipAddress.address + ')' : ' (no IP Address)';
	var fromGeo = (user.ipAddress && user.ipAddress.geoLocation) ? 
			' (' + user.ipAddress.geoLocation.latitude + ' / ' + user.ipAddress.geoLocation.longitude + ')' : 
				' (no geo)';
	var toIpAddress = (detectionSystem.ipAddress) ? ' (' + detectionSystem.ipAddress.address + ')' : ' (no IP Address)';
	var toGeo = (detectionSystem.ipAddress && detectionSystem.ipAddress.geoLocation) ? 
			' (' + detectionSystem.ipAddress.geoLocation.latitude + ' / ' + detectionSystem.ipAddress.geoLocation.longitude + ')' : 
				' (no geo)';
	
	composed.from = user.username + fromIpAddress + fromGeo;
    composed.to = detectionSystem.detectionSystemId + toIpAddress + toGeo;
    
	addActivityMessage(composed);
}

function subscribeOnSuccess(frame) {
	client.subscribe("/events", function(message) {
		logEventOrAttack('Event', message);    
	});

	client.subscribe("/attacks", function(message) {
		logEventOrAttack('Attack', message);
	});
  
	client.subscribe("/responses", function(message) {
	  	var response = JSON.parse(message.body);
	  	
	    var user = response.user;
	    var detectionSystem = response.detectionSystem;
	    
	    var composed = {};
	    
	    composed.type = 'Response';
	    
	    var responseInterval = (response.interval) ? ' ( effective for ' + response.interval.duration + ' ' + response.interval.unit + ')' : ''
	    var responseDescription = response.action + responseInterval;
	    
	    composed.category = responseDescription;	
	    composed.timestamp = event.timestamp;
	    
	    // for a response, to/from are reversed
	    var toIpAddress = (user.ipAddress) ? ' (' + user.ipAddress.address + ')' : ' (no IP Address)';
    	var toGeo = (user.ipAddress && user.ipAddress.geoLocation) ? 
    			' (' + user.ipAddress.geoLocation.latitude + ' / ' + user.ipAddress.geoLocation.longitude + ')' : 
    				' (no geo)';
    	var fromIpAddress = (detectionSystem.ipAddress) ? ' (' + detectionSystem.ipAddress.address + ')' : ' (no IP Address)';
    	var fromGeo = (detectionSystem.ipAddress && detectionSystem.ipAddress.geoLocation) ? 
    			' (' + detectionSystem.ipAddress.geoLocation.latitude + ' / ' + detectionSystem.ipAddress.geoLocation.longitude + ')' : 
    				' (no geo)';
    	
    	composed.from = detectionSystem.detectionSystemId + fromIpAddress + fromGeo;
	    composed.to = user.username + toIpAddress + toGeo;
	    
    	addActivityMessage(composed);
	});
}

function reconnectOnFailure(error) {
    console.log('STOMP: ' + error);
    setTimeout(stompConnect, 10000);
    console.log('STOMP: Reconecting in 10 seconds');
};

function stompConnect() {
    console.log('STOMP: Attempting connection');
    // recreate the stompClient to use a new WebSocket
    socket = new SockJS('/appsensor-websocket');
    client = Stomp.over(socket);
    client.connect('unused_user', 'unused_password', subscribeOnSuccess, reconnectOnFailure);
}

function keepalive() {
	// 14 mins * 60 * 1000
	setInterval(
		function(){
		   $.get(apiBaseUrl + '/ping');
		}
	, 840000); 
}

function activateSlider() {
	var items =[ 'Month','Week','Day','Shift', 'Hour'];
	var s = $("#timeline-slider");

	s.slider({
	  min:1,
	  max:items.length,
	  slide: function( event, ui ) {
		  console.log('user selected: "' + items[ui.value - 1] + '"');
      }
	});

	var oneBig = 100 / (items.length - 1);

	$.each(items, function(key,value){
	  var w = oneBig;
	  if(key === 0 || key === items.length-1)
	    w = oneBig/2;
	    
	  $("#timeline-legend").append("<label id='"+value+"-slider-label' style='width: "+w+"%'>"+value+"</laben>");
	});
	
}

var myData = [{"key":"Input Validation","values":[[1436554756634,22],[1436553603086,22],[1436557063730,24],[1436557448246,24],[1436554372118,24],[1436556294698,23],[1436555141150,25],[1436555525666,22],[1436555910182,20],[1436556679214,29],[1436555376132,21],[1436553987602,23],[1436554991616,20],[1436555760648,25],[1436553752620,22],[1436554521652,26],[1436556145164,21],[1436557298712,27],[1436555290684,23],[1436556914196,30],[1436557576418,20],[1436554906168,23],[1436556529680,27],[1436554137136,19],[1436556209250,24],[1436555055702,22],[1436557512332,23],[1436554671186,23],[1436553902154,22],[1436554286670,27],[1436556978282,24],[1436555589752,23],[1436555974268,22],[1436556593766,24],[1436557362798,26],[1436556059716,24],[1436557213264,23],[1436555205236,23],[1436557661866,20],[1436554820720,26],[1436556444232,26],[1436555675200,24],[1436554051688,25],[1436553667172,23],[1436554436204,27],[1436555440218,24],[1436555824734,24],[1436556828748,24],[1436556657852,23],[1436555354770,21],[1436554201222,25],[1436553816706,21],[1436557277350,28],[1436553581724,22],[1436554585738,23],[1436554970254,23],[1436556892834,24],[1436556273336,24],[1436557597780,21],[1436555888820,23],[1436555504304,22],[1436556358784,23],[1436556508318,26],[1436554350756,21],[1436553966240,23],[1436553731258,23],[1436554735272,25],[1436555119788,22],[1436554115774,23],[1436557127816,23],[1436555739286,23],[1436556123802,24],[1436556743300,26],[1436557747314,23],[1436556956920,25],[1436555418856,24],[1436555803372,25],[1436556572404,22],[1436557341436,22],[1436557683228,25],[1436556187888,22],[1436555269322,25],[1436554265308,25],[1436553880792,25],[1436554500290,21],[1436554884806,21],[1436556807386,23],[1436555653838,25],[1436554414842,19],[1436554799358,24],[1436557191902,26],[1436555034340,22],[1436554030326,21],[1436557426884,26],[1436556038354,23],[1436557042368,23],[1436556422870,21],[1436553645810,25],[1436554649824,19],[1436554564376,19],[1436557255988,26],[1436556871472,22],[1436557619142,25],[1436554948892,23],[1436556102440,26],[1436555717924,26],[1436555183874,27],[1436555482942,21],[1436556486956,24],[1436554179860,24],[1436553795344,22],[1436557106454,24],[1436553560362,25],[1436553944878,27],[1436557768676,25],[1436555568390,23],[1436557490970,24],[1436555952906,18],[1436554713910,25],[1436556337422,21],[1436555098426,27],[1436556721938,20],[1436555333408,24],[1436557533694,26],[1436554329394,24],[1436553709896,25],[1436557704590,23],[1436556401508,22],[1436556016992,22],[1436554094412,21],[1436555247960,22],[1436554863444,25],[1436554478928,26],[1436555782010,24],[1436556786024,22],[1436557170540,25],[1436556166526,22],[1436553859430,21],[1436557405522,22],[1436556251974,26],[1436555012978,24],[1436555397494,22],[1436554243946,25],[1436555867458,25],[1436555632476,24],[1436554628462,23],[1436556636490,18],[1436557021006,23],[1436554008964,26],[1436555162512,26],[1436556465594,21],[1436556850110,27],[1436553624448,21],[1436556081078,20],[1436557085092,22],[1436554777996,21],[1436554393480,23],[1436553773982,21],[1436555696562,24],[1436557469608,23],[1436557790038,25],[1436556700576,28],[1436554158498,24],[1436555931544,21],[1436553539000,21],[1436555547028,22],[1436557320074,19],[1436554543014,26],[1436553923516,24],[1436554927530,22],[1436556551042,25],[1436555312046,25],[1436557555056,20],[1436556316060,25],[1436556935558,22],[1436554308032,24],[1436554457566,17],[1436555611114,21],[1436555995630,22],[1436556764662,23],[1436557725952,20],[1436557149178,24],[1436557384160,23],[1436556380146,22],[1436555077064,19],[1436553688534,23],[1436554073050,26],[1436554692548,23],[1436554607100,24],[1436555461580,23],[1436556615128,21],[1436556999644,21],[1436557640504,25],[1436555226598,22],[1436556230612,24],[1436557234626,24],[1436555846096,24],[1436554222584,24],[1436554842082,23],[1436553838068,25]]},{"key":"Request","values":[[1436554756634,9],[1436553603086,11],[1436557063730,10],[1436557448246,10],[1436554372118,11],[1436556294698,8],[1436555141150,9],[1436555525666,10],[1436555910182,11],[1436556679214,11],[1436555376132,10],[1436553987602,12],[1436554991616,9],[1436555760648,9],[1436553752620,9],[1436554521652,10],[1436556145164,10],[1436557298712,11],[1436555290684,10],[1436556914196,9],[1436557576418,11],[1436554906168,11],[1436556529680,10],[1436554137136,10],[1436556209250,11],[1436555055702,10],[1436557512332,9],[1436554671186,11],[1436553902154,10],[1436554286670,10],[1436556978282,11],[1436555589752,9],[1436555974268,12],[1436556593766,9],[1436557362798,10],[1436556059716,10],[1436557213264,11],[1436555205236,9],[1436557661866,9],[1436554820720,10],[1436556444232,10],[1436555675200,12],[1436554051688,9],[1436553667172,10],[1436554436204,9],[1436555440218,10],[1436555824734,8],[1436556828748,9],[1436556657852,9],[1436555354770,10],[1436554201222,11],[1436553816706,10],[1436557277350,10],[1436553581724,10],[1436554585738,10],[1436554970254,10],[1436556892834,9],[1436556273336,10],[1436557597780,11],[1436555888820,10],[1436555504304,12],[1436556358784,11],[1436556508318,9],[1436554350756,9],[1436553966240,9],[1436553731258,10],[1436554735272,10],[1436555119788,9],[1436554115774,10],[1436557127816,10],[1436555739286,10],[1436556123802,9],[1436556743300,12],[1436557747314,11],[1436556956920,10],[1436555418856,9],[1436555803372,9],[1436556572404,10],[1436557341436,12],[1436557683228,9],[1436556187888,10],[1436555269322,11],[1436554265308,12],[1436553880792,12],[1436554500290,11],[1436554884806,10],[1436556807386,8],[1436555653838,9],[1436554414842,11],[1436554799358,10],[1436557191902,10],[1436555034340,10],[1436554030326,10],[1436557426884,10],[1436556038354,11],[1436557042368,11],[1436556422870,9],[1436553645810,11],[1436554649824,8],[1436554564376,11],[1436557255988,11],[1436556871472,11],[1436557619142,9],[1436554948892,10],[1436556102440,10],[1436555717924,10],[1436555183874,10],[1436555482942,12],[1436556486956,10],[1436554179860,10],[1436553795344,11],[1436557106454,10],[1436553560362,8],[1436553944878,12],[1436557768676,9],[1436555568390,10],[1436557490970,9],[1436555952906,11],[1436554713910,12],[1436556337422,10],[1436555098426,11],[1436556721938,11],[1436555333408,10],[1436557533694,9],[1436554329394,8],[1436553709896,9],[1436557704590,10],[1436556401508,9],[1436556016992,10],[1436554094412,12],[1436555247960,10],[1436554863444,11],[1436554478928,10],[1436555782010,9],[1436556786024,9],[1436557170540,10],[1436556166526,10],[1436553859430,12],[1436557405522,10],[1436556251974,10],[1436555012978,10],[1436555397494,9],[1436554243946,9],[1436555867458,11],[1436555632476,10],[1436554628462,12],[1436556636490,10],[1436557021006,9],[1436554008964,11],[1436555162512,11],[1436556465594,11],[1436556850110,11],[1436553624448,11],[1436556081078,12],[1436557085092,10],[1436554777996,10],[1436554393480,10],[1436553773982,9],[1436555696562,8],[1436557469608,8],[1436557790038,9],[1436556700576,10],[1436554158498,9],[1436555931544,8],[1436553539000,11],[1436555547028,10],[1436557320074,9],[1436554543014,10],[1436553923516,11],[1436554927530,8],[1436556551042,8],[1436555312046,12],[1436557555056,9],[1436556316060,12],[1436556935558,10],[1436554308032,10],[1436554457566,9],[1436555611114,9],[1436555995630,10],[1436556764662,13],[1436557725952,10],[1436557149178,10],[1436557384160,11],[1436556380146,8],[1436555077064,11],[1436553688534,10],[1436554073050,11],[1436554692548,8],[1436554607100,12],[1436555461580,11],[1436556615128,10],[1436556999644,9],[1436557640504,11],[1436555226598,9],[1436556230612,9],[1436557234626,8],[1436555846096,12],[1436554222584,9],[1436554842082,9],[1436553838068,10]]},{"key":"Authentication","values":[[1436554756634,4],[1436553603086,5],[1436557063730,5],[1436557448246,4],[1436554372118,4],[1436556294698,4],[1436555141150,5],[1436555525666,4],[1436555910182,4],[1436556679214,6],[1436555376132,4],[1436553987602,4],[1436554991616,4],[1436555760648,4],[1436553752620,5],[1436554521652,4],[1436556145164,4],[1436557298712,4],[1436555290684,4],[1436556914196,4],[1436557576418,4],[1436554906168,4],[1436556529680,4],[1436554137136,5],[1436556209250,5],[1436555055702,5],[1436557512332,4],[1436554671186,3],[1436553902154,4],[1436554286670,5],[1436556978282,5],[1436555589752,5],[1436555974268,4],[1436556593766,5],[1436557362798,3],[1436556059716,4],[1436557213264,5],[1436555205236,4],[1436557661866,4],[1436554820720,3],[1436556444232,5],[1436555675200,3],[1436554051688,4],[1436553667172,5],[1436554436204,4],[1436555440218,5],[1436555824734,5],[1436556828748,4],[1436556657852,3],[1436555354770,5],[1436554201222,5],[1436553816706,4],[1436557277350,5],[1436553581724,3],[1436554585738,4],[1436554970254,4],[1436556892834,5],[1436556273336,5],[1436557597780,4],[1436555888820,5],[1436555504304,6],[1436556358784,4],[1436556508318,4],[1436554350756,5],[1436553966240,4],[1436553731258,6],[1436554735272,5],[1436555119788,4],[1436554115774,4],[1436557127816,5],[1436555739286,5],[1436556123802,5],[1436556743300,5],[1436557747314,4],[1436556956920,4],[1436555418856,5],[1436555803372,4],[1436556572404,4],[1436557341436,6],[1436557683228,4],[1436556187888,4],[1436555269322,4],[1436554265308,4],[1436553880792,5],[1436554500290,3],[1436554884806,5],[1436556807386,5],[1436555653838,3],[1436554414842,4],[1436554799358,5],[1436557191902,4],[1436555034340,4],[1436554030326,3],[1436557426884,4],[1436556038354,4],[1436557042368,5],[1436556422870,5],[1436553645810,4],[1436554649824,4],[1436554564376,4],[1436557255988,4],[1436556871472,4],[1436557619142,4],[1436554948892,4],[1436556102440,3],[1436555717924,3],[1436555183874,5],[1436555482942,3],[1436556486956,3],[1436554179860,4],[1436553795344,5],[1436557106454,4],[1436553560362,4],[1436553944878,4],[1436557768676,5],[1436555568390,4],[1436557490970,4],[1436555952906,5],[1436554713910,3],[1436556337422,4],[1436555098426,5],[1436556721938,4],[1436555333408,4],[1436557533694,5],[1436554329394,5],[1436553709896,3],[1436557704590,4],[1436556401508,3],[1436556016992,4],[1436554094412,6],[1436555247960,5],[1436554863444,3],[1436554478928,5],[1436555782010,4],[1436556786024,4],[1436557170540,3],[1436556166526,6],[1436553859430,4],[1436557405522,4],[1436556251974,3],[1436555012978,5],[1436555397494,4],[1436554243946,4],[1436555867458,3],[1436555632476,5],[1436554628462,5],[1436556636490,4],[1436557021006,5],[1436554008964,5],[1436555162512,4],[1436556465594,5],[1436556850110,4],[1436553624448,4],[1436556081078,3],[1436557085092,3],[1436554777996,4],[1436554393480,4],[1436553773982,4],[1436555696562,5],[1436557469608,5],[1436557790038,4],[1436556700576,4],[1436554158498,4],[1436555931544,5],[1436553539000,4],[1436555547028,4],[1436557320074,4],[1436554543014,4],[1436553923516,4],[1436554927530,5],[1436556551042,4],[1436555312046,4],[1436557555056,5],[1436556316060,4],[1436556935558,4],[1436554308032,4],[1436554457566,4],[1436555611114,5],[1436555995630,5],[1436556764662,4],[1436557725952,5],[1436557149178,5],[1436557384160,4],[1436556380146,4],[1436555077064,3],[1436553688534,4],[1436554073050,4],[1436554692548,6],[1436554607100,4],[1436555461580,4],[1436556615128,5],[1436556999644,3],[1436557640504,5],[1436555226598,3],[1436556230612,4],[1436557234626,4],[1436555846096,4],[1436554222584,4],[1436554842082,5],[1436553838068,3]]}];

function buildStackedBarChart() {
	
	var now = moment();
	
	var timestamp = now.subtract(7, 'hours').format()
	
	$.ajax({
	      url: apiBaseUrl + '/api/events/grouped?earliest=' + timestamp + '&slices=10',
	      success: function(data) {
	    	  console.log('queried on ' + apiBaseUrl + '/api/events/grouped?earliest=' + timestamp + '&slices=7');
	          var viewObject = data;
	          
	          var viewData = JSON.parse(viewObject.data);
	          var viewXKey = viewObject.xkey;
	          var viewYKeys = viewObject.ykeys;
	          var viewLabels = viewObject.labels;

	          Morris.Area({
	        	  element: 'area-example',
	        	  data: JSON.parse(viewObject.data),
	        	  xkey: viewObject.xkey,
	        	  ykeys: viewObject.ykeys,
	        	  labels: viewObject.labels
	        	});
	          
	      },
	      error: function(data) {
	    	  alert('Failure contacting appsensor service for loading events.');
	      }
	  });
	
	$("#last-updated-time").text(now.format("YYYY/MM/DD, HH:mm"));
	
	$("#Month-slider-label").html('Month <span class="badge" title="10 events / 5 responses">10 / 5</span>');
	$("#Week-slider-label").html('Week <span class="badge" title="9 events / 4 responses">9 / 4</span>');
	$("#Day-slider-label").html('Day <span class="badge" title="8 events / 3 responses">8 / 3</span>');
	$("#Shift-slider-label").html('Shift <span class="badge" title="7 events / 2 responses">7 / 2</span>');
	$("#Hour-slider-label").html('Hour <span class="badge" title="6 events / 1 responses">6 / 1</span>');
	
	 
}

function setToArray(set) {
  var it = set.values(),
      ar = [],
      val;

  while(val = it.next().value) {
    ar.push(val);
  }

  return ar;
}
  

$(function() {
//	stompConnect();
	keepalive();
	activateSlider();
	buildStackedBarChart();
});
